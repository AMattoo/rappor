// Wire format for RAPPOR reports.

package rappor;

// Application specific stuff.  TODO: Move into "package
// protobuf_encoder_demo".
enum FieldId {
  NAME_FIELD = 0;
  ADDRESS_FIELD = 1;
}


// These collection parameters must be known to the RAPPOR analysis code.
message EncodingParams {
  optional int32 num_bits = 1;  // k
  optional int32 num_hashes = 2;  // h

  // NOTE: The client does NOT need this.  Client gets a single cohort.  Only
  // analysis needs it.
  //optional int32 num_cohorts = 3;  // m

  // TODO: Name of hash function?
}

enum FieldType {
  STRING = 0;
  ORDINAL = 1;
  BOOLEAN = 2;
}

// A single observation, which may contain multiple variables encoded reported
// together.

message Report {
  // ID of field.
  // TODO: instead of repeated field ID, it's better to have a single schema
  // ID.  That has the types.
  repeated int32 field_id = 1;

  // Ordered RAPPOR reports that represent a record.
  repeated uint64 bits = 2;
}

message ReportList {
  // NOTE: These could be of heterogeneous types.  So should each report
  // contain a schema identifier?  That's probably the easiest.
  repeated Report report = 1;

  // Header fields
  optional int32 cohort = 2;

  // optional EncodingParams params = 2;
  // Stuff about schema can be here, e.g. params

  // RecordSchema could populate this directly?
  // Or you can put an application-specific integer ID, to save size.
}
