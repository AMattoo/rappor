package rappor;

// These collection parameters must be known to the RAPPOR analysis code.
message EncodingParams {
  optional int32 num_bits = 1;  // k
  optional int32 num_hashes = 2;  // h

  // NOTE: The client does NOT need this.  Client gets a single cohort.  Only
  // analysis needs it.
  //optional int32 num_cohorts = 3;  // m

  // TODO: Name of hash function?
}

message ReportListHeader {
  optional string metric_name = 1;
  optional int32 cohort = 2;
  optional EncodingParams params = 3;
}

message ReportList {
  optional ReportListHeader header = 1;
  repeated bytes report = 2;
}

enum FieldType {
  STRING = 0;
  ORDINAL = 1;
  BOOLEAN = 2;
}

// A single observation, which may contain multiple variables encoded reported
// together.

message Report {
  // RAPPOR report.
  repeated uint64 report = 2;

  // Schema ID?
  // or field num, report?
  //
  // field num, param ID, report?
}

// Hierarchy:

// Big list of various report types (like Chrome has).  To save space.
// I guess that is ReportList.  They can be same or different.
//
// Cohort goes in here.


// ReportSet.  Multiple reports that have to go message?
// How do you identify them?
// By the schema?

// RecordReport - the thing that Encode() of message gives you

// FieldReport - individual fields.  Just uint64?  Type is in schema.






